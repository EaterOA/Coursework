#!/bin/bash

# randstr.sh
#
# Uses /dev/urandom to generate a string of random printable characters, with
# a default length of 16. Useful for generating random passwords.

err_exit() {
    cat >&2 <<EOF
Usage: randstr.sh [-ans] [number_of_characters]

randstr provides a simple way to construct a random sequence of characters.
Perfect for passwords. The number of characters can be adjusted with an integer
argument. If unspecified, the default is 16.

randstr allows some customization of the output character set. By default,
randstr generates only alphanumeric characters. Specifying any option will
result in randstr only using characters from that option, unioned with any
other options specified.

Options:
    -a      generate alpha characters
    -n      generate numeric characters
    -s      generate special characters
    -x      generate hexadecimal characters
EOF
    exit 1
}

numchars="16"
filtered=false
fields="[:alpha:][:digit:]"
upper=""
while getopts ":ansx" opt; do
    if [ "$filtered" = false ]; then
        fields=""
        filtered=true
    fi
    case $opt in
        n)
            fields="${fields}[:digit:]"
            ;;
        a)
            fields="${fields}[:alpha:]"
            hex="false"
            ;;
        s)
            fields="${fields}[:punct:]"
            ;;
        x)
            fields="${fields}[:xdigit:]"
            if [ "$hex" = "" ]; then
              hex="true"
            fi
            ;;
        \?)
            err_exit
            ;;
    esac
done
shift $(($OPTIND-1))

# numchars argument must be an integer
if [ ! -z "$1" ]; then
    re='^[0-9]+$'
    if ! [[ "$1" =~ $re ]]; then
        err_exit
    fi
    numchars="$1"
fi

hex_filt="cat"
if [ "$hex" = "true" ]; then
  hex_filt="tr -cd '[:digit:][:upper:]'"
fi

tr -cd "$fields" < /dev/urandom | $hex_filt | head -c "$numchars" ; echo
